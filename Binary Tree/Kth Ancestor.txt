# kth Parent :-

Node* solve(Node* root,int & k,int node)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data == node)
    {
        return root;
    }
    Node* leftAns = solve(root->left,k,node);
    Node* rightAns = solve(root->right,k,node);

    if(leftAns != NULL && rightAns == NULL)
    {
        k--;
        if(k==0)
        {
            k = INT_MAX;
            return root;
        }
        return leftAns;
    }
    if(leftAns == NULL && rightAns != NULL)
    {
        k--;
        if(k==0)
        {
            k = INT_MAX;
            return root;
        }
        return rightAns;
    }
    return root;
}
int kthAncestor(NOde* root,int k,int node)
{
    Node* ans = solve(root,k,node);
    if(ans == NULL ||  ans->data == node)
        return -1;
    else
        return ans->data;
}

2nd Methode:

void solve(Node* root,int k,int node,vector<int> &path) 
{
    if(root == NULL)
        return ;
    
    if(root->data == node)
    {
        return;
    }
    path.push_back(root->data);

    solve(root->left,k,node,path);
    solve(root->right,k,node,path);

    if (path.size() > 0 && path.back() != node)
        path.pop_back();
}

int kthAncestor(Node* root,int k,int node)
{
    vector<int> path;
    solve(root,k,node,path);

    int x = path.size();

    if(x==0)
    return -1;

    if (x < k) 
        return root->data;

    return path[x-k];

}