# Balance = | height(left) - height(right) | <= 1

int height(struct Nodde* node)
{
    if(node==NULL)
        return 0;
    
    int left = height(node->left);
    int right = height(node->right);

    int ans = max(left,right)+1;
    return ans;
}

bool isBalanced(TreeNode* root){

    if(root==NULL)
        return true;

    bool left = isBalanced(root->left);
    bool right = isBalanced(root->right);

    bool diff = abs(height(root->left)-height(root->right)) <= 1;

    if(diff && left && right)
        return true;

    return false;
}

# Optimised :-

pair<bool,int> isBalancedFast(TreeNode *root) {

    if (root == NULL)
    {
        pair<bool,int> p  = make_pair(true,0);
        return p ;
    }

    pair<bool,int> left = isBalancedFast(root->left);
    pair<bool,int> right = isBalancedFast(root->right);

    bool leftAns = left.first;
    bool rightAns = right.first;

    bool diff = abs(left.second - right.secont) <= 1;

    pair<bool,int> ans;
    ans.first = leftAns &&  rightAns && diff;
    ans.second = max(left.second , right.second) + 1;

    return ans;
}
bool isBalanced(TreeNode* root) {

    return isBalancedFast(root).first;
}