class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char ch)
    {
        this->data = ch;
        for(int i = 0; i < 26; i++)
        {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie{
    public:
    TrieNode* root;

    Trie()
    {
        root = new TrieNode('\0');
    }

    void insertUtil(TrieNode* root, string word)
    {
        if(word.size() == 0)
        {
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'A';
        TrieNode* child;
        if(root->children[index] != NULL)
        {
            child = root->children[index];
        }
        else
        {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        insertUtil(child, word.substr(1));
    }
    void insertWord(string word)
    {
        insertUtil(root, word);
    }

    void printSuggestion(TrieNode* curr,vector<string> &temp,string prefix)
    {
        if(curr->isTerminal)
        {
            temp.push_back(prefix);
        }    

        for(char ch = 'A';ch<='Z';ch++)
        {
            TrieNode* next = new TrieNode(ch-'A');

            if(next != NULL)
            {
                prefix.push_back(ch);
                printSuggestion(next,temp,prefix);
                prefix.pop_back();
            }
        }
    }

    vector<vector<string> > getSuggestion(stirng str)
    {
        TrieNode* prev = root;
        vector<vector<string> > ans;
        string prefix = "";

        for(int i=0;i<str.length();i++)
        {
            char lastch = str[i];
            prefix.push_back(lastch);

            TrieNode* curr = prev->children[lastch-'A'];

            if(curr == NULL)
                break;

            vector<string> temp;
            printSuggestion(curr,temp,prefix);

            ans.push_back(temp);
            temp.clear();
            prev = curr;
        }
        return ans;
    }
};

vector<vector<string> > phoneDirectory(vector<string> &contactList, string &querystr)
{
    Trie* t  = new Trie();
    for(int i=0;i<contactList.size();i++)
    {
        t->insertWord(contactList[i]);
    }

    return t->getSuggestion(querystr);
}