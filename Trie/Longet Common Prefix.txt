string logestCommonPrefix(vector<string> &arr,int n)
{
    string ans = "";

    for(int i=0;i<arr[0].length().i++)
    {
        char ch = arr[0][i];
        bool match = true;

        for(int j=1;j<n;j++)
        {
            if(arr[j].size() <= i || arr[j][i] != ch)
            {
                match = false;
                break;
            }
        }
        if(match == false)
            break;
        else
            ans.push_back(ch);
    }
}

# 2nd Method:

class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    int childCount;
    bool isTerminal;

    TrieNode(char ch)
    {
        this->data = ch;
        for(int i = 0; i < 26; i++)
        {
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie{
    public:
    TrieNode* root;

    Trie(char ch)
    {
        root = new TrieNode(ch);
    }

    void insertUtil(TrieNode* root, string word)
    {
        if(word.size() == 0)
        {
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'A';
        TrieNode* child;
        if(root->children[index] != NULL)
        {
            child = root->children[index];
        }
        else
        {
            child = new TrieNode(word[0]);
            root->childCount++;
            root->children[index] = child;
        }

        insertUtil(child, word.substr(1));
    }
    void insertWord(string word)
    {
        insertUtil(root, word);
    }

    void lcp(string str,string &ans)
    {
        for(int i=0;i<str.length(),i++)
        {
            char ch = str[i];
            if(root->childCount == 1)
            {
                ans.push_back(ch);
                int index = ch-'A';
                root = root->children[index];
            }
            else
                break;

            if(root->isTerminal)
                break;
        }
    }
}
string logestCommonPrefix(vector<string> &arr,int n)
{
    Trie *t = new Trie('\0');
    for(int i=0;i<n;i++)
    {
        t->insertWord(arr[i]);
    }

    string first = arr[0];
    string ans = "";

    t->lcp(first,ans);
    return ans;
}