class node{
    public:
        int data;
        int row;
        int col;

        node(int a,int b,int c)
        {
            data = a;
            row = b;
            col = c;
        }
};
class compare{
    public:
        bool operator()(node* a,node* b)
        {
            return a->data > b->data;
        }
};
int kSorted(vector<vector<int> > &a ,int k, int n)
{
    int mini = INT_MAX,maxi = INT_MIN;
    priority_queue<node* , vector<node*> , compare> minHeap;

    for(int i=0;i<k;i++)
    {
        int ele = a[i][0];
        maxi = max(maxi,ele);

        minHeap.push(new node(ele,i,0));
    }

    int start = INT_MAX;
    int end = INT_MIN;

    while(!minHeap.empty())
    {
        node* tmp = minHeap.top();
        minHeap.pop();
        mini = tmp->data;

        if(maxi - mini < start - end)
        {
            start = mini;
            end = maxi;
        }

        if(temp->col + 1 < n)
        {
            maxi = max(maxi,a[temp->row][temp->col + 1]);
            minHeap.push(new node(a[temp->row][temp->col + 1],temp->row,temp->col + 1));
        }
        else
        {
            break;
        }
    }
    return (end-start+1);
}