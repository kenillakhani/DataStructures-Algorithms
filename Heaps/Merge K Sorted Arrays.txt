class node{
    public:
        int data;
        int i;
        int j;

        node(int a,int b,int c)
        {
            data = a;
            i = b;
            j = c;
        }
};
class compare{
    public:
        bool operator()(node* a,node* b)
        {
            return a->data > b->data;
        }
};
vector<int> mergeKSortedArray(vector<vector<int> > &Arrays,int k)
{
    priority_queue<node* , vector<node*>, compare> minHeap;

    for(int i=0;i<k;i++)
    {
        node* tmp = new node(Arrays[i][0]);
        minHeap.push(tmp);
    }

    vector<int> ans;

    while(minHeap.size() > 0)
    {
        node* tmp = minHeap.top();
        ans.push_back(tmp->data);
        minHeap.pop();

        int i = tmp->i;
        int j = tmp->j;

        if(j+1 < Arrays[i].size()) 
        {
            node* next = new node(Arrays[i][j+1],i,j+1);
            minHeap.push(next);
        }       
    }
    return ans;
}