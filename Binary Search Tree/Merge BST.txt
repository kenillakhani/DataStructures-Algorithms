void inorder(Node* root,vector<int> & inorderVal)
{
    if(root == NULL) 
        return;
    
    inorder(root->left,inorderVal);
    inorderVal.push_back(root->data);
    inorder(root->right,inorderVal);
}
vector<int> mergeArray(vector<int> &a , vector<int> &b)
{
    vector<int> ans(a.size()+b.size());
    int i=0,j=0;

    while(i<a.size() && j < b.size())
    {
        if(a[i] <= b[j])
        {   
            ans[i+j]=a[i];
            i++;    
        }
        else
        {
            ans[i+j]=b[j];
            j++;
        }
    }
    while(i < a.size())
    {
        ans[i+j] = a[i];
        i++;
    }
    while(j < b.size())
    {
        ans[i+j] = b[j];
        j++;
    }
    return ans;
}
Node* inorderToBST(int s,int e,vector<int> &inorderVal)
{
    if(s>e)
        return NULL;
    
    int mid = (s+e)/2;
    Node* root = new Node(inorderVal[mid]);

    root->left =  inorderToBST(s,mid-1,inorderVal);
    root->right= inorderToBST(mid+1,e,inorderVal);
}

Node* mergeBST(Node* root1,Node* root2)
{
    vector<int> bst1;
    vector<int> bst2;

    inorder(root1,bst1);
    inorder(root2,bst2);

    vector<int> mergeArr = mergeArray(bst1,bst2);
    int s = 0;
    int e = mergeArr.size()-1;

    Node* root = inorderToBST(s,e,mergeArr);
    return root;
}

## Space Optimized::-

void convertIntoDLL(Node* root,Node* &head)
{
    if(root == NULL)
        return root;
    
    convertIntoDLL(root->right,head);

    root->right = head;

    if(head != NULL)
        head->left = root;

    head = root;
    convertIntoDLL(root->left,head);
}
Node* mergeLL(Node* head1,Node* head2)
{
    Node* head = NULL;
    Node* tail = NULL:;

    while(head1 != NULL && head2 != NULL)
    {
        if(head1->data <= head2->data)
        {
            if(head == NULL)
            {
                head = head1;
                tail = head1;
                head1 = head1->right;
            }
            else
            {
                tail->right = head1;
                head1->left = tail;
                tail = tail->right;
                head1 = head1->right;
            }
        }
        else
        {
            if(head == NULL)
            {
                head = head2;
                tail = head2;
                head2 = head2->right;
            }
            else
            {
                tail->right = head2;
                head2->left = tail;
                tail = tail->right;
                head2 = head2->right;
            }
        }
    }
    while(head1 != NULL)
    {
        tail->right = head1;
        head1->left = tail;
        tail = tail->right;
        head1 = head1->right;
    }
    while(head2 != NULL)
    {
        tail->right = head2;
        head2->left = tail;
        tail = tail->right;
        head2 = head2->right;
    }
    return head;
}
int countNodes(Node* head)
{
    int cnt = 0;
    while(head != NULL)
    {
        cnt++;
        head = head->right;
    }
    return cnt;
}
Node* sortedLLtoBST(Node* &head, int n)
{   
    if(n<=0 || head == NULL)
    {
        return NULL;
    }

    Node* left = sortedLLtoBST(head,n/2);
    Node* root = head;

    root->left = left;
    head = head->right;

    root->right = sortedLLtoBST(head,n-n/2-1);

    return root;
}
Node* mergeBST(Node* root1,Node* root2)
{
    Node* head1 = NULL;
    convertIntoDLL(root1,head1);
    head1->left = NULL;

    Node* head2 = NULL;
    convertIntoDLL(root2,head2);
    head2->left = NULL;

    Node* head = mergeLL(head1,head2);

    return sortedLLtoBST(head,countNodes(head));
}